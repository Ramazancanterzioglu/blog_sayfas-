"""
Render.com deployment i√ßin √∂zel Django management command
Bu command otomatik olarak superuser olu≈üturur ve gerekli kurulumlarƒ± yapar.
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.conf import settings
from django.core.management import call_command
import os

class Command(BaseCommand):
    help = 'Render.com deployment i√ßin otomatik setup'

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.WARNING('üöÄ Render.com FULL SETUP ba≈ülatƒ±lƒ±yor...')
        )

        # 1. Force migrate first
        self.force_migrate()
        
        # 2. Database kontrol√º
        self.check_database()
        
        # 3. Superuser olu≈ütur (force)
        self.force_create_superuser()
        
        # 4. Gerekli klas√∂rleri olu≈ütur
        self.create_directories()
        
        # 5. Final verification
        self.final_verification()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Render.com FULL SETUP tamamlandƒ±!')
        )

    def force_migrate(self):
        """Force migration - t√ºm migration'larƒ± zorla √ßalƒ±≈ütƒ±r"""
        self.stdout.write(
            self.style.WARNING('üîÑ Force migration ba≈ülatƒ±lƒ±yor...')
        )
        
        try:
            # 1. Check database connection first
            self.stdout.write('üìã Testing database connection...')
            from django.db import connection
            cursor = connection.cursor()
            cursor.execute("SELECT 1")
            self.stdout.write('‚úÖ Database connection OK')
            
            # 2. Create migration files if needed
            self.stdout.write('üìã Creating migrations...')
            try:
                call_command('makemigrations', '--noinput', verbosity=1)
                self.stdout.write('‚úÖ Makemigrations completed')
            except Exception as e:
                self.stdout.write(f'‚ö†Ô∏è Makemigrations warning: {str(e)}')
            
            # 3. Run syncdb first (create basic tables)
            self.stdout.write('üìã Running migrate --run-syncdb...')
            try:
                call_command('migrate', '--run-syncdb', '--noinput', verbosity=1)
                self.stdout.write('‚úÖ Syncdb completed')
            except Exception as e:
                self.stdout.write(f'‚ö†Ô∏è Syncdb warning: {str(e)}')
            
            # 4. Run normal migrations
            self.stdout.write('üìã Running normal migrations...')
            try:
                call_command('migrate', '--noinput', verbosity=1)
                self.stdout.write('‚úÖ Normal migrations completed')
            except Exception as e:
                self.stdout.write(f'‚ö†Ô∏è Normal migration warning: {str(e)}')
            
            # 5. Final migration attempt (cleanup)
            self.stdout.write('üìã Final migration cleanup...')
            try:
                call_command('migrate', '--noinput', verbosity=1)
                self.stdout.write('‚úÖ Final migration completed')
            except Exception as e:
                self.stdout.write(f'‚ö†Ô∏è Final migration warning: {str(e)}')
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Force migration tamamlandƒ±!')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Migration kritik hatasƒ±: {str(e)}')
            )
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è Devam ediliyor... Manuel migration gerekebilir.')
            )

    def check_database(self):
        """Database baƒülantƒ±sƒ±nƒ± ve tablolarƒ± kontrol eder"""
        try:
            from django.db import connection
            cursor = connection.cursor()
            
            # Database connection test
            cursor.execute("SELECT 1")
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Database baƒülantƒ±sƒ± ba≈üarƒ±lƒ±!')
            )
            
            # List all tables
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            self.stdout.write(f'üìä Database tables ({len(tables)}):')
            for table in tables:
                self.stdout.write(f'  - {table}')
            
            # Check critical tables
            critical_tables = ['auth_user', 'anasayfa_dizifilm', 'anasayfa_geziblog']
            for table in critical_tables:
                if table in tables:
                    self.stdout.write(f'‚úÖ {table} tablosu mevcut')
                else:
                    self.stdout.write(f'‚ö†Ô∏è {table} tablosu eksik')
                    
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Database kontrol√º ba≈üarƒ±sƒ±z: {str(e)}')
            )

    def force_create_superuser(self):
        """Force superuser olu≈ütur - aggressive mode"""
        
        # Environment variables'dan al, yoksa default deƒüerler
        username = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'ramazancan')
        email = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'ramazan61135@gmail.com')
        password = os.environ.get('DJANGO_SUPERUSER_PASSWORD', '12345678Ramazan')
        
        self.stdout.write(
            self.style.WARNING(f'üîß FORCE Superuser olu≈üturma: {username}')
        )
        
        try:
            # Delete existing user if exists (aggressive approach)
            existing_users = User.objects.filter(username=username)
            if existing_users.exists():
                existing_users.delete()
                self.stdout.write(f'üóëÔ∏è Mevcut kullanƒ±cƒ± silindi: {username}')
            
            # Create fresh superuser
            user = User.objects.create_superuser(
                username=username,
                email=email,
                password=password
            )
            
            # Double check permissions
            user.is_superuser = True
            user.is_staff = True
            user.is_active = True
            user.save()
            
            self.stdout.write(
                self.style.SUCCESS(f'üéâ FORCE Superuser olu≈üturuldu: {username}')
            )
            
            # Test authentication
            from django.contrib.auth import authenticate
            auth_user = authenticate(username=username, password=password)
            if auth_user:
                self.stdout.write(f'‚úÖ Authentication test ba≈üarƒ±lƒ±!')
            else:
                self.stdout.write(f'‚ùå Authentication test ba≈üarƒ±sƒ±z!')
            
            # Final superuser count
            superuser_count = User.objects.filter(is_superuser=True).count()
            self.stdout.write(f'üëë Toplam superuser: {superuser_count}')
            
            self.stdout.write(f'üîë LOGIN INFO:')
            self.stdout.write(f'   Username: {username}')
            self.stdout.write(f'   Password: {password}')
            self.stdout.write(f'   Admin URL: /admin/')
            
        except Exception as e:
            import traceback
            self.stdout.write(
                self.style.ERROR(f'‚ùå FORCE Superuser hatasƒ±: {str(e)}')
            )
            self.stdout.write(f'üîç Traceback:\n{traceback.format_exc()}')

    def create_directories(self):
        """Gerekli klas√∂rleri olu≈üturur"""
        
        directories = [
            settings.MEDIA_ROOT,
            os.path.join(settings.MEDIA_ROOT, 'dizi_film'),
            os.path.join(settings.MEDIA_ROOT, 'gezi_blog'),
        ]
        
        for directory in directories:
            try:
                if not os.path.exists(directory):
                    os.makedirs(directory, exist_ok=True)
                    self.stdout.write(
                        self.style.SUCCESS(f'üìÅ Klas√∂r olu≈üturuldu: {directory}')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'üìÅ Klas√∂r zaten mevcut: {directory}')
                    )
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Klas√∂r olu≈üturulamadƒ± {directory}: {str(e)}')
                )

    def final_verification(self):
        """Final doƒürulama - her ≈üeyin √ßalƒ±≈ütƒ±ƒüƒ±nƒ± kontrol et"""
        self.stdout.write(
            self.style.WARNING('üîç Final verification ba≈ülatƒ±lƒ±yor...')
        )
        
        try:
            # User count
            total_users = User.objects.count()
            superusers = User.objects.filter(is_superuser=True).count()
            
            # Model counts
            from anasayfa.models import DiziFilm, GeziBlog
            dizi_count = DiziFilm.objects.count()
            gezi_count = GeziBlog.objects.count()
            
            # Summary
            self.stdout.write(f'üìä FINAL STATS:')
            self.stdout.write(f'   üë§ Total users: {total_users}')
            self.stdout.write(f'   üëë Superusers: {superusers}')
            self.stdout.write(f'   üé¨ DiziFilm records: {dizi_count}')
            self.stdout.write(f'   üó∫Ô∏è GeziBlog records: {gezi_count}')
            self.stdout.write(f'   üìÅ Media root: {settings.MEDIA_ROOT}')
            
            # Test critical functionality
            if superusers > 0:
                self.stdout.write('‚úÖ Superuser check: PASSED')
            else:
                self.stdout.write('‚ùå Superuser check: FAILED')
                
            # Test models
            try:
                DiziFilm.objects.all().exists()
                self.stdout.write('‚úÖ DiziFilm model: WORKING')
            except Exception:
                self.stdout.write('‚ùå DiziFilm model: ERROR')
                
            try:
                GeziBlog.objects.all().exists()
                self.stdout.write('‚úÖ GeziBlog model: WORKING')
            except Exception:
                self.stdout.write('‚ùå GeziBlog model: ERROR')
                
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Final verification tamamlandƒ±!')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Final verification hatasƒ±: {str(e)}')
            ) 