"""
Django settings for blog_sayfasi project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Import dj_database_url only for production
try:
    import dj_database_url
except ImportError:
    dj_database_url = None


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-)vnuui#-84$@z4wbz7v0z#g@y_0lz+af**06m-f_pq$!*zao5&")

# SECURITY WARNING: don't run with debug turned on in production!
# Debug mode - environment variable'dan al
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'  # Local i√ßin default True

# Local development i√ßin RENDER olmadƒ±ƒüƒ±nda DEBUG'ƒ± zorla True yap
if 'RENDER' not in os.environ:
    DEBUG = True
    print("üîß Local development: DEBUG = True")

# Logging configuration for production debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if 'RENDER' in os.environ else 'verbose',
            'level': 'WARNING' if 'RENDER' in os.environ else 'DEBUG',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING' if 'RENDER' in os.environ else 'INFO',
        },
        'anasayfa': {
            'handlers': ['console'],
            'level': 'ERROR' if 'RENDER' in os.environ else 'DEBUG',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING' if 'RENDER' in os.environ else 'INFO',
    },
}

ALLOWED_HOSTS = ['*']  # Ge√ßici olarak t√ºm hostname'lere izin ver

# Render.com hostname ayarlarƒ±
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

# Production security settings for Render
if 'RENDER' in os.environ:
    ALLOWED_HOSTS = ['*']
    
    # CSRF settings for production
    CSRF_TRUSTED_ORIGINS = [
        'https://*.onrender.com',
    ]
    
    # Add specific hostname if provided
    if RENDER_EXTERNAL_HOSTNAME:
        CSRF_TRUSTED_ORIGINS.append(f'https://{RENDER_EXTERNAL_HOSTNAME}')
        if RENDER_EXTERNAL_HOSTNAME not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
    
    # Session and CSRF settings for production
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = False  # JavaScript eri≈üimi i√ßin
    CSRF_USE_SESSIONS = False  # Session yerine cookie kullan
    CSRF_COOKIE_SAMESITE = 'Lax'  # CSRF i√ßin daha esnek
    SESSION_COOKIE_SAMESITE = 'Lax'
    
    # CSRF failure i√ßin √∂zel ayar
    CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
    
    # Security headers (biraz daha esnek)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'SAMEORIGIN'  # DENY yerine SAMEORIGIN
    
    # Performance optimizations for Render
    CONN_MAX_AGE = 60  # Database connection pooling
    
    # Disable unnecessary features for memory efficiency
    USE_TZ = True
    USE_I18N = False  # Disable internationalization to save memory
    
else:
    # Development settings
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "anasayfa",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# CSRF debugging removed for production performance

ROOT_URLCONF = "blog_sayfasi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blog_sayfasi.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        'CONN_MAX_AGE': 60 if 'RENDER' in os.environ else 0,
    }
}

# Production database configuration for Render
if 'RENDER' in os.environ:
    if 'DATABASE_URL' in os.environ and dj_database_url:
        # PostgreSQL if DATABASE_URL provided
        DATABASES['default'] = dj_database_url.parse(os.environ.get('DATABASE_URL'))
        DATABASES['default']['CONN_MAX_AGE'] = 60  # Connection pooling
        print("üêò PostgreSQL database kullanƒ±lƒ±yor")
    else:
        # SQLite for Render - use persistent location if available
        import tempfile
        import os
        
        # Try to use a more persistent location
        db_dirs = ['/opt/render/project/src', '/tmp']
        db_path = None
        
        for db_dir in db_dirs:
            try:
                if os.path.exists(db_dir) and os.access(db_dir, os.W_OK):
                    db_path = os.path.join(db_dir, 'db.sqlite3')
                    break
            except:
                continue
        
        if not db_path:
            db_path = os.path.join('/tmp', 'db.sqlite3')
            
        print(f"üìÅ SQLite database konumu: {db_path}")
        
        DATABASES['default'] = {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': db_path,
            'CONN_MAX_AGE': 60,
        }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Static files configuration for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise storage backend
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Ensure static files are found
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Force static files to be served
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True
WHITENOISE_MAX_AGE = 31536000  # 1 year
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['webp', 'jpg', 'jpeg', 'png', 'gif', 'svg']

# =============================================================================
# CLOUDINARY CONFIGURATION - Persistent Media Storage
# =============================================================================
# Cloudinary konfig√ºrasyonunu tamamen kaldƒ±racaƒüƒ±m ve basit media ayarlarƒ±na d√∂neceƒüim

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Production media files configuration for Render - Basitle≈ütirilmi≈ü
if 'RENDER' in os.environ:
    # Render'da media files i√ßin tmp dizini kullan
    MEDIA_ROOT = '/tmp/media'
    print(f"üìÅ Production media konumu: {MEDIA_ROOT}")
    
    # Media dizinini olu≈ütur
    try:
        os.makedirs(MEDIA_ROOT, exist_ok=True)
        print(f"‚úÖ Media dizini hazƒ±r: {MEDIA_ROOT}")
    except Exception as e:
        print(f"‚ö†Ô∏è Media dizini olu≈üturulamadƒ±: {str(e)}")
else:
    print(f"üìÅ Local media konumu: {MEDIA_ROOT}")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
